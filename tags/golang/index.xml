<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Wiremoons Web Site</title>
    <link>http://www.wiremoons.com/tags/golang/</link>
    <description>Recent content in golang on Wiremoons Web Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 09 Dec 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.wiremoons.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Three Letter Passwords</title>
      <link>http://www.wiremoons.com/posts/2014-12-09-three-letter-word-passwords/</link>
      <pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.wiremoons.com/posts/2014-12-09-three-letter-word-passwords/</guid>
      <description>Three Word - Password Generator Summary I recently created a simple application named uniquely as passgen which was written to generate a random password created from a pool of English three letter words. This gave me a small Golang project to work on, and also to create a handy tool to generate strong passwords.
How Does it Work? This application generates password suggestions based on a pool of several hundred three letter English words.</description>
    </item>
    
    <item>
      <title>Serving Up Static Content from Golang Apps</title>
      <link>http://www.wiremoons.com/posts/2014-11-30-serving-up-static-content-from-golang-apps/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.wiremoons.com/posts/2014-11-30-serving-up-static-content-from-golang-apps/</guid>
      <description>The Background Go is a great programming language, and three of the features I like the most are:
 its easy cross platform program creation - write a program on a Linux 64bit system—cross compile easily, and deploy the executable straight onto a Windows 32bit computer (if you so desire of course!); its modern awareness of the web - and therefore inclusion of commonly required application functionality built-in to the language libraries; its static compilation - related to the first one, but key in that it is only the executable that needs to be deployed—no library dependency, DLL hell, or installation packaging needed.</description>
    </item>
    
    <item>
      <title>Go Web Server - Why Two Log Outputs?</title>
      <link>http://www.wiremoons.com/posts/2014-10-01-golang-why-two-log-outputs/</link>
      <pubDate>Sat, 01 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.wiremoons.com/posts/2014-10-01-golang-why-two-log-outputs/</guid>
      <description>The Go Program Create a very simple Go web server as follows, by saving the following Go code into a file called server.go:
package main import ( &amp;quot;io&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) // Function Home - that handles a web server request for a page func Home(w http.ResponseWriter, req *http.Request) { // write some text to the calling web browser io.WriteString(w, &amp;quot;Hello World!&amp;quot;) // output to the console that we did something log.</description>
    </item>
    
  </channel>
</rss>