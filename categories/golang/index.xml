<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Golang on wiremoons web site </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://www.wiremoons.com/categories/golang/index.xml/</link>
    
    
    
    <updated>Tue, 09 Dec 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Three Letter Passwords</title>
      <link>http://www.wiremoons.com/posts/2014-12-09-Three-Letter-Word-Passwords/</link>
      <pubDate>Tue, 09 Dec 2014 00:00:00 UTC</pubDate>
      
      <guid>http://www.wiremoons.com/posts/2014-12-09-Three-Letter-Word-Passwords/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Three Word - Password Generator&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I recently created a simple application named uniquely as &lt;code&gt;passgen&lt;/code&gt;
which was written to generate a random password created from a pool of
English three letter words. This gave me a small Golang project to
work on, and also to create a handy tool to generate strong passwords.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;How Does it Work?&lt;/h3&gt;

&lt;p&gt;This application generates password suggestions based on a pool of
several hundred three letter English words. The words are selected
from the pool randomly, and then displayed to the screen so you can
choose one for use as a very secure password.&lt;/p&gt;

&lt;p&gt;It is important that you combine the three letter words together to
form a single string of characters (without the spaces)&amp;mdash;to
obtain a password with a minimum length on 9 characters. Longer
combinations are stronger, but unfortunately not all sites or computer
systems accept really long passwords still.&lt;/p&gt;

&lt;p&gt;You can of course add digits/numbers to your password also, and
punctuation characters too if you wish&amp;mdash;but it would be wiser to
keep the password simple, and easy to remember, but change it more
frequently instead, using a fresh newly generated one every few weeks.&lt;/p&gt;

&lt;p&gt;An example of the output from the program is below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            THREE WORD - PASSWORD GENERATOR
            ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
• Number of three letter words available in the pool is: 573
• Number of three letter words to include in the suggested password is: 3
  • Password character length will therefore be: 9
• Mixed case passwords to be provided: false
• Offering 3 suggested passwords for your consideration:

   din wry ran
   ova ram lit
   ski yea koa

All is well
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Are These Passwords Secure?&lt;/h3&gt;

&lt;p&gt;While the passwords generated look far too simple and easy to be
secure, they are in fact very secure, and difficult to crack. Just
because they look simple to a human&amp;mdash;it doesn&amp;rsquo;t mean they are
simple to work out using a computer. They are in fact quite hard to
work out for a computer, as they are random, not a single dictionary
word, or a single common name (with perhaps number substitutions and
other common &amp;lsquo;complex&amp;rsquo; combinations)&amp;mdash;or some combination of
these approaches.  It is a common misconception that a password has to
be &amp;lsquo;complex&amp;rsquo; to be any good.&lt;/p&gt;

&lt;p&gt;Unfortunately we have been led to believe that the more complex a
password is&amp;mdash;the better and more secure it will be&amp;mdash;which is
in fact wrong.&lt;/p&gt;

&lt;p&gt;In fact a longer password, but one that can that can be more easily
remembered, and therefore consequentially be changed more frequently,
actually offers a far greater degree of security.&lt;/p&gt;

&lt;p&gt;For more information or more detailed explanations of this approach,
please see the web pages included below under &amp;lsquo;References&amp;rsquo;. There are
plenty of other expert sources on the Internet also, that will explain
the security benefits of using a randomly generated three word (or
more) combination password. Just remember&amp;mdash;your password must be
at least nine characters in total&amp;mdash;or longer if possible. You can
of course always add additional punctuation, and/or numbers, should
you wish!&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;So How Many Possible Passwords Are There?&lt;/h3&gt;

&lt;p&gt;There are over 500 three letter words in the pool that can be chosen
from, and assuming you use at least three of these words combined,
that provide 500^3 (500 to power of 3) possible combinations&amp;mdash;of
which one is your password.&lt;/p&gt;

&lt;p&gt;So - 500 x 500 x 500 = 125,000,000 (one hundred and twenty five
million) possibilities.&lt;/p&gt;

&lt;p&gt;Maybe that doesn&amp;rsquo;t sound like a lot - but if you could check 20 of
them every second, 24 hours a day, you would need roughly 60 days to
get through them all!&lt;/p&gt;

&lt;p&gt;If you use the mixed case option (upper and lower case)&amp;mdash;then
that number increases further of course&amp;mdash;and you can still add
numbers, and/or punctuation characters if you wish too.&lt;/p&gt;

&lt;p&gt;Or just increase you password length to 12 characters, so use four of
the three letter words combined, and you end up with 62,500,000,000 (sixty two
billion five hundred million) possibilities&amp;mdash;and that just lower case
letters only.&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;So Where Is It Then?&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/wiremoons/passgen&#34;&gt;passgen source code&lt;/a&gt; is available from my GitHub page, and I have made
pre-compiled binaries for Windows, Mac, and Linux available from a
&lt;a href=&#34;https://github.com/wiremoons/passgen/releases&#34;&gt;Release Page&lt;/a&gt;. The application is not feature complete yet&amp;mdash;but it
does work well, and will improve as I get time to work on it further.&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Thomas Baekdal - The Usability of Passwords - FAQ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baekdal.com/insights/the-usability-of-passwords-faq&#34;&gt;http://www.baekdal.com/insights/the-usability-of-passwords-faq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Steve Gibson - GRC &amp;lsquo;How Big is Your Haystack?&amp;rsquo;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.grc.com/haystack.htm&#34;&gt;https://www.grc.com/haystack.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Serving Up Static Content from Golang Apps</title>
      <link>http://www.wiremoons.com/posts/2014-11-30-Serving-Up-Static-Content-from-Golang-Apps/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 UTC</pubDate>
      
      <guid>http://www.wiremoons.com/posts/2014-11-30-Serving-Up-Static-Content-from-Golang-Apps/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;The Background&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/&#34; title=&#34;&#39;The Go Programming Language&#39; - @google&#34;&gt;Go&lt;/a&gt; is a great programming language, and three of the features I like the most are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;its easy cross platform program creation&lt;/strong&gt; - write a program on a Linux 64bit system&amp;mdash;cross compile easily, and deploy the executable straight onto a Windows 32bit computer (if you so desire of course!);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;its modern awareness of the web&lt;/strong&gt; - and therefore inclusion of commonly required application functionality built-in to the language libraries;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;its static compilation&lt;/strong&gt; - related to the first one, but key in that it is only the executable that needs to be deployed&amp;mdash;no library dependency, DLL hell, or installation packaging needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What I dont like to much at the moment&amp;mdash;or probably more correctly&amp;mdash;I am coming to terms with, is the different approach is the lack of a standard graphical user interface (GUI) libraries. There is lots of work going on to port the usual suspects (&lt;a href=&#34;http://mattn.github.io/go-gtk/&#34; title=&#34;&#39;Go GTK&#39; - @mattn&#34;&gt;GTK&lt;/a&gt;, &lt;a href=&#34;https://github.com/visualfc/goqt&#34; title=&#34;&#39;GoQT&#39; - @visualfc&#34;&gt;QT&lt;/a&gt;, &lt;a href=&#34;https://github.com/AndrewBC/cursed&#34; title=&#34;&#39;Cursed&#39; - @AndrewBC&#34;&gt;ncurses&lt;/a&gt;, &lt;a href=&#34;https://github.com/go-qml/qml&#34; title=&#34;&#39;go-qml&#39; - @go-qml&#34;&gt;QML&lt;/a&gt;), and there are some good native Go libraries about too (&lt;a href=&#34;https://github.com/nsf/termbox-go&#34; title=&#34;&#39;termbox-go&#39; - @nsf&#34;&gt;termbox-go&lt;/a&gt;) and of course the ability to use a web interface.&lt;/p&gt;

&lt;p&gt;So while I am personally quite happy with the command line interface (CLI), and most quick applications I write are just that, if you ever want to make your computer program accessible to the majority of computer users, a familiar GUI is required.&lt;/p&gt;

&lt;p&gt;So, I thought I would have a go at creating an application that is managed and controlled by the user through a web browser. My inspiration for this is the fantastic open source application called &lt;a href=&#34;http://syncthing.net/&#34; title=&#34;&#39;Syncthing - *Syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized*&#39;&#34;&gt;Syncthing&lt;/a&gt;. When you start this application (you can optional disable this behaviour of course!) it will open the users web browser, and provide a very modern (using &lt;a href=&#34;http://getbootstrap.com/&#34; title=&#34;&#39;Bootstrap open-sourced framework&#39; - @mdo and @fat&#34;&gt;Bootstrap&lt;/a&gt; and other code) interface, that is intuitive, informative, instructional, and independent.&lt;/p&gt;

&lt;p&gt;What do I mean by this?  Well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;intuitive&lt;/strong&gt;: when you see the interface you immediately get an idea of what it is for, and how you might interact with it&amp;mdash;it&amp;rsquo;s in the web browser which you use frequently and are familiar with (hopefully!);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;informative&lt;/strong&gt;: the interface contains useful functional information that serves a purpose, and therefore inspires confidence that in will do what it is designed for;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;instructional&lt;/strong&gt;: the interface contains enough hints, labels, indicators, and meta help to ensure you are confident to interact with it&amp;mdash;without fear it destroy you computer;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;independent&lt;/strong&gt;: the interface is self contained on one web page; doesn&amp;rsquo;t sprawl onto other areas, doesn&amp;rsquo;t needs other &amp;lsquo;stuff&amp;rsquo; to make it work (expect the modern browser), and feels contained and manageable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that covers off the user needs, well a lot of the key &lt;em&gt;getting going&lt;/em&gt; ones anyway!&lt;/p&gt;

&lt;p&gt;So how hard is it to make something as cool as &lt;a href=&#34;https://github.com/syncthing/syncthing&#34; title=&#34;&#39;Syncthing&#39; - @calmh&#34;&gt;Syncthing&lt;/a&gt;&amp;rsquo;s awesome offering?&lt;/p&gt;

&lt;p&gt;How does it work in the background?  How do I get a functional &lt;em&gt;under the hood&lt;/em&gt; application to sync my files&amp;mdash;and a cool user interface? Where does it store all the code, the web pages, the web-server, the Bootstrap, JavaScript, never-mind the actual programs original file-syncing purpose?&lt;/p&gt;

&lt;p&gt;Well that&amp;rsquo;s the journey I have begun, trying to figure out what I need to do to replicate this, or something close to it&amp;mdash;and add a nice web browser based GUI to one of my programs, that is currently a CLI application only.&lt;/p&gt;

&lt;p&gt;Just to make it easy on myself the application I want to put a front end on is quite simple, but does use a database to store its information. This is currently in &lt;a href=&#34;http://www.sqlite.org/&#34; title=&#34;SQlite - *SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine.*&#34;&gt;SQLite&lt;/a&gt;&amp;mdash;so maybe I will write another post in the future about my quest on using non Go and native Go databases in my applications&amp;hellip;&lt;/p&gt;

&lt;p&gt;So, this article is going to just focus on managing the GUI interface content in the application, and specifically how it can be included in the application binary?&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The Problem to be Solved&lt;/h2&gt;

&lt;p&gt;So surely you just write you application, throw in a &lt;a href=&#34;https://golang.org/doc/articles/wiki/&#34; title=&#34;Golang.org wiki article: &#39;Writing Web Applications&#39;- @google&#34;&gt;simple Go web server&lt;/a&gt;, give it some HTML pages, chuck in some Bootstrap CSS and job done?&lt;/p&gt;

&lt;p&gt;Well that&amp;rsquo;s what I first thought too, being an optimist when it comes to starting a new hobby programming endeavour! Just quickly wrap those add-ons around my code&amp;mdash;job done&amp;mdash;while the kettle is boiling ready for my next coffee break. I expect any professional programmer reading this is banging his head against the desk while cackling to themselves now!&lt;/p&gt;

&lt;p&gt;So back to the five minute job. I thought I would start with a simple web server, and the Bootstrap integration, how hard can that be. I found on Google a great article by Greg Reinbach on building &lt;a href=&#34;http://www.reinbach.com/&#34; title=&#34;Greg Reinbach blog article &#39;Golang Web Apps&#39;&#34;&gt;Golang Web Apps&lt;/a&gt; which fitted the bill perfectly. After being completely side tracked (see my previous article: &lt;a href=&#34;http://www.wiremoons.com/posts/2014-10-01-goLang-why-two-log-outputs&#34; title=&#34;&#39;Why Two Log Outputs?&#39; - @wiremoons&#34;&gt;&amp;lsquo;Why Two Log Outputs?&amp;rsquo;&lt;/a&gt;) I finally got a web server running. After also reading another helpful article  by @zeebo called &lt;a href=&#34;http://shadynasty.biz/blog/2012/07/30/quick-and-clean-in-go/&#34; title=&#34;&#39;Quick and Clean in Go&#39; - blog article by @zeebo&#34;&gt;&amp;lsquo;Quick and Clean in Go&amp;rsquo;&lt;/a&gt;, I believed I was there!&lt;/p&gt;

&lt;p&gt;I managed to create some static pages, and got a brief understanding of &lt;a href=&#34;http://golang.org/pkg/html/template&#34; title=&#34;&#39;HTML Templates Package&#39; - @google&#34;&gt;html templates&lt;/a&gt;, chucked in the download Bootstrap CSS, tested it locally, and so was &lt;em&gt;good to go&lt;/em&gt;&amp;mdash;or not&amp;hellip;&lt;/p&gt;

&lt;p&gt;My application maybe used in an environment where it will not be able to access the internet&amp;mdash;so it needs to be self sufficient. It also will run across different platforms (Linux, Mac and Windows), so the application should be a self contained binary to make upgrades easy, and therefore with as few external dependencies as possible (ie no database files; web pages; CSS style sheet; graphics; etc).&lt;/p&gt;

&lt;p&gt;No worries I thought, along with the the go application code I wrote&amp;mdash;all my other dependencies files are laid out in directories alongside the Go code file (templates, static files, css, etc)&amp;mdash;just as all the internet articles I read suggest (or more importantly I had assumed was implied)&amp;mdash;so surely all that stuff I massaged together into a nice logical file structure gets included once my application is built right! After all Go builds self contained static binaries with all the required libraries and dependencies taken care of!&lt;/p&gt;

&lt;p&gt;Wrong. Build the application and it runs fine locally. Excitably deploy it to another computer (or virtual machine), and you end up with panics, errors and screens of information telling you that you are obviously stupid and incompetent when it comes to programming, as the content cant be found any more!&lt;/p&gt;

&lt;p&gt;Back to &amp;lsquo;the Google&amp;rsquo; for some more advice and answers to question that are only provided in the context that you ask them in&amp;mdash;so this time I asked with a wider context, less assumptions, and more perceived wisdom, the research restarted.&lt;/p&gt;

&lt;p&gt;It turns out that clever Golang programmers embed all there files and external dependencies themselves within their application binaries. This is done with a mixture of voodoo that can include compression (ie zip, or gzip), base64 encoding, directory and file walking, pre-build work, and internal application clever path management of the then incorporated files. There are a few options around that can be used to achieved this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write your own - such as the Syncthing author @calmh did&amp;mdash;reading (or in my case trying to unpick and decipher) the &lt;a href=&#34;https://github.com/syncthing/syncthing&#34; title=&#34;&#39;Syncthing&#39; - @calmh&#34;&gt;Syncthing source code&lt;/a&gt;, it has build scripts and asset creation code which is very useful;&lt;/li&gt;
&lt;li&gt;Use a native Golang tool for the job such as: &lt;a href=&#34;https://github.com/jteeuwen/go-bindata&#34; title=&#34;go-bindata - *A small utility which generates Go code from any file.* - @jteeuwen&#34;&gt;go-bindata&lt;/a&gt;, &lt;a href=&#34;https://github.com/GeertJohan/go.rice&#34; title=&#34;go.rice - *a Go package that makes working with resources such as html,js,css,images,templates, etc very easy.* - @GeertJohan&#34;&gt;go.rice&lt;/a&gt; which provide an out of the box solution which I found via Google search;&lt;/li&gt;
&lt;li&gt;Also courtesy of an &lt;a href=&#34;http://mattjibson.com/blog/2014/11/19/esc-embedding-static-assets/&#34; title=&#34;&#39;esc: Embedding Static Assets in Go&#39; - blog by @mjibson&#34;&gt;blog article&lt;/a&gt; on this same subject, there is @mjibson&amp;rsquo;s own &lt;a href=&#34;https://github.com/mjibson/esc&#34; title=&#34;&#39;esc - *A simple file embedder for Go*&#39; - @mjibson&#34;&gt;ecs&lt;/a&gt;, and another I didnt find &lt;a href=&#34;https://github.com/rakyll/statik&#34; title=&#34;&#39;statik - *Embed static files into a Go executable*&#39;&#39; - @rakyll&#34;&gt;statik&lt;/a&gt;. Thanks to the weekly &lt;a href=&#34;http://golangweekly.com/&#34; title=&#34;&#39;A great weekly &#39;Go Newsletter&#39; sent to your inbox&amp;amp;mdash;once your subscribe of course!&#39;&#39; - @mattrco and @kelseyhightower&#34;&gt;Go Newsletter&lt;/a&gt; &lt;a href=&#34;http://www.golangweekly.com/archive/go-newsletter-issue-37/&#34; title=&#34;Go Newsletter Issue #37&#34;&gt;Issue #37&lt;/a&gt; for helping me find this resource!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So there are plenty of solutions out there to this issue, and I am sure that I can use one of the approaches listed above to incorporate a working model and solution into my own application. Time for more reading, coding experiments, and hopefully a working application soon!&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Questions for the Future&lt;/h2&gt;

&lt;p&gt;Not researched this question yet&amp;mdash;but if web applications that are run from users local machines are going to increase over time (I run a few myself already)&amp;mdash;how are we going to manage the proliferation of port usage for all the local web servers running each application? Each web server, for each web application will need its own local port.&lt;/p&gt;

&lt;p&gt;So, currently when a web application is written, it runs its own web server on an unprivileged port on the local machine (ie &lt;code&gt;http://localhost:8080/&lt;/code&gt; where &lt;code&gt;8080&lt;/code&gt; is the port). That port defaults to one chosen by the codes author. If we all pick the same ones, then the user is going to be left with the task of re-configuring the application and assigning a free port on their computer.&lt;/p&gt;

&lt;p&gt;So the question is: &lt;em&gt;is there a local web server port usage/allocation solution out there, or some kind of mux, or Application Programming Interface (API) we can use?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As I said at the start of this article - Go has a &amp;lsquo;modern awareness of the web&amp;rsquo;, so does it already have a clever solution we can all adopt?&lt;/p&gt;

&lt;p&gt;Otherwise&amp;mdash;time to research local machine port scanning code to find a solution!&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Further Information&lt;/h2&gt;

&lt;p&gt;Further resources and information used in-conjunction with the above article (and linked to in-line) can be found here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/&#34;&gt;http://golang.org/&lt;/a&gt; &amp;lsquo;The Go Programming Language&amp;rsquo; - @google&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.github.io/go-gtk/&#34;&gt;http://mattn.github.io/go-gtk/&lt;/a&gt; &amp;lsquo;Go GTK&amp;rsquo; - @mattn&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/visualfc/goqt&#34;&gt;https://github.com/visualfc/goqt&lt;/a&gt; &amp;lsquo;GoQT&amp;rsquo; - @visualfc&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AndrewBC/cursed&#34;&gt;https://github.com/AndrewBC/cursed&lt;/a&gt; &amp;lsquo;Cursed&amp;rsquo; - @AndrewBC&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-qml/qml&#34;&gt;https://github.com/go-qml/qml&lt;/a&gt; &amp;lsquo;go-qml&amp;rsquo; - @go-qml&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nsf/termbox-go&#34;&gt;https://github.com/nsf/termbox-go&lt;/a&gt; &amp;lsquo;termbox-go&amp;rsquo; - @nsf&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/syncthing/syncthing&#34;&gt;https://github.com/syncthing/syncthing&lt;/a&gt; &amp;lsquo;Syncthing&amp;rsquo; - @calmh&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getbootstrap.com/&#34;&gt;http://getbootstrap.com/&lt;/a&gt; &amp;lsquo;Bootstrap open-sourced framework&amp;rsquo; - @mdo and @fat&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/articles/wiki/&#34;&gt;https://golang.org/doc/articles/wiki/&lt;/a&gt; Golang.org wiki article: &amp;lsquo;Writing Web Applications&amp;rsquo;- @google&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reinbach.com/&#34;&gt;http://www.reinbach.com/&lt;/a&gt; Greg Reinbach blog article &amp;lsquo;Golang Web Apps&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wiremoons.com/posts/2014-10-01-goLang-why-two-log-outputs&#34;&gt;http://www.wiremoons.com/posts/2014-10-01-goLang-why-two-log-outputs&lt;/a&gt; &amp;lsquo;Why Two Log Outputs?&amp;rsquo; - @wiremoons&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/html/template&#34;&gt;http://golang.org/pkg/html/template&lt;/a&gt; &amp;lsquo;HTML Templates Package&amp;rsquo; - @google&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shadynasty.biz/blog/2012/07/30/quick-and-clean-in-go/&#34;&gt;http://shadynasty.biz/blog/2012/07/30/quick-and-clean-in-go/&lt;/a&gt; &amp;lsquo;Quick and Clean in Go&amp;rsquo; - blog article by @zeebo&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jteeuwen/go-bindata&#34;&gt;https://github.com/jteeuwen/go-bindata&lt;/a&gt; go-bindata - &lt;em&gt;A small utility which generates Go code from any file.&lt;/em&gt; - @jteeuwen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GeertJohan/go.rice&#34;&gt;https://github.com/GeertJohan/go.rice&lt;/a&gt; go.rice - &lt;em&gt;a Go package that makes working with resources such as html,js,css,images,templates, etc very easy.&lt;/em&gt; - @GeertJohan&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattjibson.com/blog/2014/11/19/esc-embedding-static-assets/&#34;&gt;http://mattjibson.com/blog/2014/11/19/esc-embedding-static-assets/&lt;/a&gt; &amp;lsquo;esc: Embedding Static Assets in Go&amp;rsquo; - blog by @mjibson&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mjibson/esc&#34;&gt;https://github.com/mjibson/esc&lt;/a&gt; &amp;lsquo;esc - &lt;em&gt;A simple file embedder for Go&lt;/em&gt;&amp;rsquo; - @mjibson&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rakyll/statik&#34;&gt;https://github.com/rakyll/statik&lt;/a&gt; &amp;lsquo;statik - &lt;em&gt;Embed static files into a Go executable&lt;/em&gt;&amp;rdquo; - @rakyll&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://syncthing.net/&#34;&gt;http://syncthing.net/&lt;/a&gt; &amp;lsquo;Syncthing - &lt;em&gt;Syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized&lt;/em&gt;&amp;lsquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sqlite.org/&#34;&gt;http://www.sqlite.org/&lt;/a&gt; SQlite - &lt;em&gt;SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golangweekly.com/&#34;&gt;http://golangweekly.com/&lt;/a&gt; &amp;lsquo;A great weekly &amp;lsquo;Go Newsletter&amp;rsquo; sent to your inbox&amp;mdash;once your subscribe of course!&amp;rdquo; - @mattrco and @kelseyhightower&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.golangweekly.com/archive/go-newsletter-issue-37/&#34;&gt;http://www.golangweekly.com/archive/go-newsletter-issue-37/&lt;/a&gt; Go Newsletter Issue #37&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Go Web Server - Why Two Log Outputs?</title>
      <link>http://www.wiremoons.com/posts/2014-10-01-goLang-why-two-log-outputs/</link>
      <pubDate>Sat, 01 Nov 2014 00:00:00 UTC</pubDate>
      
      <guid>http://www.wiremoons.com/posts/2014-10-01-goLang-why-two-log-outputs/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;The Go Program&lt;/h1&gt;

&lt;p&gt;Create a very simple Go web server as follows, by saving the following Go code into a file called server.go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;io&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
)

// Function Home - that handles a web server request for a page
func Home(w http.ResponseWriter, req *http.Request) {
	// write some text to the calling web browser
	io.WriteString(w, &amp;quot;Hello World!&amp;quot;)
	// output to the console that we did something
	log.Println(&amp;quot;served a web page&amp;quot;)
}

// Function: MAIN
func main() {
	// start up output - to let us know the web server is starting
	log.Println(&amp;quot;Starting server...&amp;quot;)
	// handler registered for requests to the root of our web server - send them to the function &#39;Home&#39;
	http.HandleFunc(&amp;quot;/&amp;quot;, Home)
	// start a web server on localhost port 8000 grabbing any errors that occur
	err := http.ListenAndServe(&amp;quot;:8000&amp;quot;,nil)
	// check for any errors from the above web server start-up
	if err != nil {
		log.Fatal(&amp;quot;ListenAndServer: &amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming you already have Go installed on your computer and configured correctly, the above can be run with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go run server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The Strange Output?&lt;/h2&gt;

&lt;p&gt;So what&amp;rsquo;s the point?&lt;/p&gt;

&lt;p&gt;Well we now have a simple web server that displays &lt;strong&gt;&amp;ldquo;Hello World!&amp;rdquo;&lt;/strong&gt; in you browser window, which is very cool for so little code! You need to send browser to the URL:  &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the curious thing (to me) was whenever I visit the page or just refreshed it, I was seeing two outputs on the console window as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2014/11/01 07:31:02 served a web page
2014/11/01 07:31:02 served a web page
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The time stamp is the same for both outputs&amp;mdash;and I only visited the page once. So why two outputs??&lt;/p&gt;

&lt;p&gt;The outputs are being provided by the code that runs each time the handler function called &amp;lsquo;&lt;code&gt;Home&lt;/code&gt;&amp;rsquo; to serve a web page is run, the output is generated by the &lt;code&gt;log.Println(&amp;quot;served a web page&amp;quot;)&lt;/code&gt; instruction. But why is it output twice?&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;The Investigation&lt;/h2&gt;

&lt;p&gt;So a quick search on Google to find out! Nothing obvious to explain it. Time to figure it out&amp;hellip;&lt;/p&gt;

&lt;p&gt;Reasons I thought of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A bug in Go?  I doubt it very much&amp;mdash;the &lt;code&gt;log.Println&lt;/code&gt; is used by lots of people&amp;rsquo;s programs, so I hardly think I am the first person to notice something as simple as this - so probably not a bug!&lt;/li&gt;
&lt;li&gt;Maybe it is outputting a log entry for both stdout and stderr?  Possible&amp;mdash;but unlikely for a default setting.&lt;/li&gt;
&lt;li&gt;I have done something dumb (again!) and the output is getting called twice due to some programming logic error&amp;mdash;quite possible&amp;mdash;but checking the code logic, nothing stands out!&lt;/li&gt;
&lt;li&gt;So&amp;mdash;must be some other issue causing it I guess&amp;mdash;time to find out more&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need to isolate why we are getting two log outputs for one page visit. So some way to see if the two log outputs are for the same reason (ie duplicates)&amp;mdash;or in fact they are generated correctly for two different reasons. But how?&lt;/p&gt;

&lt;p&gt;Well, if the &lt;code&gt;Home&lt;/code&gt; function is being call twice (as the log output indicates), then there must be two requests being handled by the web server?&lt;/p&gt;

&lt;p&gt;Ok, so how can I differentiate between the two log outputs?&lt;/p&gt;

&lt;p&gt;Looking at the &lt;code&gt;Home&lt;/code&gt; function I see it requires two parameters when it is called to serve a web page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Home(w http.ResponseWriter, req *http.Request)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;1st function parameter : &lt;code&gt;w http.ResponseWriter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2nd function parameter : &lt;code&gt;req *http.Request&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The 2nd is the &lt;code&gt;http.Request&lt;/code&gt;&amp;mdash;so the Hyper Text Transfer Protocol (HTTP) request to serve some content. This is the request sent by our web browser asking for something to be provided by our web server!&lt;/p&gt;

&lt;p&gt;So if we are genuinely getting two requests (hence to log output)&amp;mdash;we should be able to see them by checking the requests themselves!&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;The Re-Code to Find the Problem&lt;/h2&gt;

&lt;p&gt;Quick change to the code&amp;mdash;so the log output also provides the &lt;code&gt;http.Request&lt;/code&gt; we get from the browser&amp;mdash;so we can examine them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;io&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
)

// Function Home - that handles a web server request for a page
func Home(w http.ResponseWriter, req *http.Request) {
	io.WriteString(w, &amp;quot;Hello World!&amp;quot;)
	log.Print(&amp;quot;served a web page:\n&amp;quot;,req,&amp;quot;\n\n&amp;quot;)
}

// Function: MAIN
func main() {
	// start up output - to let us know the web server is starting
	log.Println(&amp;quot;Starting server...&amp;quot;)
	// handler registered for requests to the root of our web server - send them to the function &#39;Home&#39;
	http.HandleFunc(&amp;quot;/&amp;quot;, Home)
	// start a web server on localhost port 8000 grabbing any errors that occur
	err := http.ListenAndServe(&amp;quot;:8000&amp;quot;,nil)
	// check for any errors from the above web server start-up
	if err != nil {
		log.Fatal(&amp;quot;ListenAndServer: &amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code, we have altered the request to the log package&amp;mdash;asking it now also to provide a copy of the &lt;code&gt;http.Request&lt;/code&gt; it received (ie information held in the variable: &lt;code&gt;req&lt;/code&gt;) as well as a few newlines (ie &lt;code&gt;\n&lt;/code&gt;) to improve the output formatting to the console. The new line of code is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;log.Print(&amp;quot;served a web page\n&amp;quot;,req,&amp;quot;\n\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output we see when now when re-running the server and requesting a page is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2014/11/01 07:51:02 Starting server...
2014/11/01 07:51:06 served a web page:
&amp;amp;{GET / HTTP/1.1 1 1 map[Accept:[text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8] User-Agent:[Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.94 Chrome/37.0.2062.94 Safari/537.36] Dnt:[1] Accept-Encoding:[gzip,deflate,sdch] Accept-Language:[en-US,en;q=0.8] Connection:[keep-alive] Cache-Control:[max-age=0]] 0x7eb1c0 0 [] false localhost:8000 map[] map[] &amp;lt;nil&amp;gt; map[] 127.0.0.1:54933 / &amp;lt;nil&amp;gt;}

2014/11/01 07:51:06 served a web page:
&amp;amp;{GET /favicon.ico HTTP/1.1 1 1 map[Dnt:[1] User-Agent:[Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.94 Chrome/37.0.2062.94 Safari/537.36] Accept-Encoding:[gzip,deflate,sdch] Accept-Language:[en-US,en;q=0.8] Connection:[keep-alive] Accept:[*/*]] 0x7eb1c0 0 [] false localhost:8000 map[] map[] &amp;lt;nil&amp;gt; map[] 127.0.0.1:54933 /favicon.ico &amp;lt;nil&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at the two outputs again&amp;mdash;we can now see they are both different requests!!  But why?&lt;/p&gt;

&lt;p&gt;The first request starts with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;{GET / HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is a &lt;code&gt;GET&lt;/code&gt; for &lt;code&gt;/&lt;/code&gt; &amp;mdash;so asking (ie GETting) a copy of the web page located on the web server at the location &lt;code&gt;/&lt;/code&gt; &amp;mdash;which is the root of the web site.  That is is fine&amp;mdash;and what we would expect&amp;mdash;a request to provide a web page&amp;hellip;&lt;/p&gt;

&lt;p&gt;The second request then&amp;mdash;this starts with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;{GET /favicon.ico HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is a &lt;code&gt;GET&lt;/code&gt; for &lt;code&gt;/favicon.ico&lt;/code&gt; - so asking (ie GETting) a copy of a file called &lt;code&gt;favicon.ico&lt;/code&gt; located on the web server. Ok&amp;mdash;so the browser issues a second request to our web server&amp;mdash;asking for a copy of the icon our web site uses&amp;mdash;the little icon you see for the site in your bookmarks, to help identify the site.&lt;/p&gt;

&lt;p&gt;Now it makes sense why we are getting two request for every single web page served. No bug, no coding error, no weird log options&amp;mdash;just a simple double request each time a page is served&amp;mdash;once for the page content, and a second for any fav icon our site might have.&lt;/p&gt;

&lt;p&gt;The tin foil hat can go back into the cupboard&amp;mdash;this is normal.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;What Next?&lt;/h2&gt;

&lt;p&gt;Well&amp;mdash;now we have this logging facility, we might as well keep it, and add an option to our code to turn it on and off. We need to add another package to provide this functionality called &lt;code&gt;io/ioutil&lt;/code&gt; and add another line to manage the output to our main function: &lt;code&gt;log.SetOutput(ioutil.Discard)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This discards (ie throws away) the log output if we wish. To re-enable it&amp;mdash;change this line to: &lt;code&gt;log.SetOutput(io.Stderr)&lt;/code&gt; &amp;mdash;or just comment the line out to go back to the default behaviour. If you do comment it out though&amp;mdash;you will also need to comment out the &lt;code&gt;io/ioutil&lt;/code&gt; package as well&amp;mdash;as you wont be using it any more in the program, and the Go compiler will spot this and complain to you!&lt;/p&gt;

&lt;p&gt;The final code looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;io&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
)

// Function that handles a web server request for a page
func Home(w http.ResponseWriter, req *http.Request) {
	io.WriteString(w, &amp;quot;Hello World!&amp;quot;)
	log.Print(&amp;quot;served a web page\n&amp;quot;,req,&amp;quot;\n\n&amp;quot;)
}

// Function: MAIN
func main() {
	// control log output: &#39;ioutil.discard&#39; == throw away  or  &#39;os.Stderr&#39; == output to Stderr (console)
	log.SetOutput(ioutil.Discard)
	// start up output
	log.Println(&amp;quot;Starting server...&amp;quot;)
	// handler registered for requests to the root of our web server - send them to the function &#39;Home&#39;
	http.HandleFunc(&amp;quot;/&amp;quot;, Home)
	// start a web server on localhost port 8000 grabbing any errors that occur
	err := http.ListenAndServe(&amp;quot;:8000&amp;quot;,nil)
	// check for any errors from the above web server start-up
	if err != nil {
		log.Fatal(&amp;quot;ListenAndServer: &amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Further Information&lt;/h2&gt;

&lt;p&gt;As an exercise&amp;mdash;the flags package could be used to control the log output (ie turn logging output on or off) when the web server is started up.&lt;/p&gt;

&lt;p&gt;Further resources and information used in-conjunction with the above can be found here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reinbach.com/&#34;&gt;http://www.reinbach.com/&lt;/a&gt; - Greg Reinbach blog article &amp;ldquo;Golang Web Apps&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.goinggo.net/2013/11/using-log-package-in-go.html&#34;&gt;http://www.goinggo.net/2013/11/using-log-package-in-go.html&lt;/a&gt; - A Going Go Programming article on &amp;ldquo;Using The Log Package In Go&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://screamingatmyscreen.com/2013/6/http-request-and-goroutines/&#34;&gt;http://screamingatmyscreen.com/2013/6/http-request-and-goroutines/&lt;/a&gt; - Timo Zimmermann blog on &amp;ldquo;http.Request and goroutines&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22131865/defer-log-setoutputos-stdout-after-log-setoutputioutil-discard&#34;&gt;http://stackoverflow.com/questions/22131865/defer-log-setoutputos-stdout-after-log-setoutputioutil-discard&lt;/a&gt; - Stack Overflow article on ioutil changes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/src/pkg/log/log.go&#34;&gt;http://golang.org/src/pkg/log/log.go&lt;/a&gt; - Go source code for the log package&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>