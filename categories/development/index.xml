<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Development on wiremoons web site </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://www.wiremoons.com/categories/development/index.xml/</link>
    
    
    
    <updated>Sat, 01 Nov 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Go Web Server - Why Two Log Outputs?</title>
      <link>http://www.wiremoons.com/posts/2014-10-01-goLang-why-two-log-outputs/</link>
      <pubDate>Sat, 01 Nov 2014 00:00:00 UTC</pubDate>
      
      <guid>http://www.wiremoons.com/posts/2014-10-01-goLang-why-two-log-outputs/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;The Go Program&lt;/h1&gt;

&lt;p&gt;Create a very simple Go web server as follows, by saving the following Go code into a file called server.go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;io&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
)

// Function Home - that handles a web server request for a page
func Home(w http.ResponseWriter, req *http.Request) {
	// write some text to the calling web browser
	io.WriteString(w, &amp;quot;Hello World!&amp;quot;)
	// output to the console that we did something
	log.Println(&amp;quot;served a web page&amp;quot;)
}

// Function: MAIN
func main() {
	// start up output - to let us know the web server is starting
	log.Println(&amp;quot;Starting server...&amp;quot;)
	// handler registered for requests to the root of our web server - send them to the function &#39;Home&#39;
	http.HandleFunc(&amp;quot;/&amp;quot;, Home)
	// start a web server on localhost port 8000 grabbing any errors that occur
	err := http.ListenAndServe(&amp;quot;:8000&amp;quot;,nil)
	// check for any errors from the above web server start-up
	if err != nil {
		log.Fatal(&amp;quot;ListenAndServer: &amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming you already have Go installed on your computer and configured correctly, the above can be run with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go run server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The Strange Output?&lt;/h2&gt;

&lt;p&gt;So what&amp;rsquo;s the point?&lt;/p&gt;

&lt;p&gt;Well we now have a simple web server that displays &lt;strong&gt;&amp;ldquo;Hello World!&amp;rdquo;&lt;/strong&gt; in you browser window, which is very cool for so little code! You need to send browser to the URL:  &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the curious thing (to me) was whenever I visit the page or just refreshed it, I was seeing two outputs on the console window as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2014/11/01 07:31:02 served a web page
2014/11/01 07:31:02 served a web page
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The time stamp is the same for both outputs&amp;mdash;and I only visited the page once&amp;mdash;so why two outputs??&lt;/p&gt;

&lt;p&gt;The outputs are being provided by the code that runs each time the handler function called &amp;lsquo;&lt;code&gt;Home&lt;/code&gt;&amp;rsquo; to serve a web page is run, the output is generated by the &lt;code&gt;log.Println(&amp;quot;served a web page&amp;quot;)&lt;/code&gt; instruction. But why is it output twice?&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;The Investigation&lt;/h2&gt;

&lt;p&gt;So a quick search on Google to find out! Nothing obvious to explain it. Time to figure it out&amp;hellip;&lt;/p&gt;

&lt;p&gt;Reasons I thought of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A bug in Go?  I doubt it very much&amp;mdash;the log.Println is used by lots of people&amp;rsquo;s programs, so I hardly think I am the first person to notice something as simple as this - so probably not a bug!&lt;/li&gt;
&lt;li&gt;Maybe it is outputting a log entry for both stdout and stderr?  Possible&amp;mdash;but unlikely for a default setting.&lt;/li&gt;
&lt;li&gt;I have done something dumb (again!) and the output is getting called twice due to some programming logic error&amp;mdash;quite possible&amp;mdash;but checking the code logic, nothing stands out!&lt;/li&gt;
&lt;li&gt;So&amp;mdash;must be some other issue causing it I guess&amp;mdash;time to find out more&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need to isolate why we are getting two log outputs for one page visit. So some way to see if the two log outputs are for the same reason (ie duplicates)&amp;mdash;or in fact they are generated correctly for two different reasons. But how?&lt;/p&gt;

&lt;p&gt;Well, if the &lt;code&gt;Home&lt;/code&gt; function is being call twice (as the log output indicates), then there must be two requests being handled by the web server?&lt;/p&gt;

&lt;p&gt;Ok, so how can I differentiate between the two log outputs?&lt;/p&gt;

&lt;p&gt;Looking at the &lt;code&gt;Home&lt;/code&gt; function I see it requires two parameters when it is called to serve a web page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Home(w http.ResponseWriter, req *http.Request)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;1st function parameter : &lt;code&gt;w http.ResponseWriter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2nd function parameter : &lt;code&gt;req *http.Request&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The 2nd is the &lt;code&gt;http.Request&lt;/code&gt;&amp;mdash;so the Hyper Text Transfer Protocol (HTTP) request to serve some content. This is the request sent by our web browser asking for something to be provided by our web server!&lt;/p&gt;

&lt;p&gt;So if we are genuinely getting two requests (hence to log output)&amp;mdash;we should be able to see them by checking the requests themselves!&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;The Re-Code to Find the Problem&lt;/h2&gt;

&lt;p&gt;Quick change to the code&amp;mdash;so the log output also provides the &lt;code&gt;http.Request&lt;/code&gt; we get from the browser&amp;mdash;so we can examine them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;io&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
)

// Function Home - that handles a web server request for a page
func Home(w http.ResponseWriter, req *http.Request) {
	io.WriteString(w, &amp;quot;Hello World!&amp;quot;)
	log.Print(&amp;quot;served a web page:\n&amp;quot;,req,&amp;quot;\n\n&amp;quot;)
}

// Function: MAIN
func main() {
	// start up output - to let us know the web server is starting
	log.Println(&amp;quot;Starting server...&amp;quot;)
	// handler registered for requests to the root of our web server - send them to the function &#39;Home&#39;
	http.HandleFunc(&amp;quot;/&amp;quot;, Home)
	// start a web server on localhost port 8000 grabbing any errors that occur
	err := http.ListenAndServe(&amp;quot;:8000&amp;quot;,nil)
	// check for any errors from the above web server start-up
	if err != nil {
		log.Fatal(&amp;quot;ListenAndServer: &amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code, we have altered the request to the log package&amp;mdash;asking it now also to provide a copy of the &lt;code&gt;http.Request&lt;/code&gt; it received (ie information held in the variable: &lt;code&gt;req&lt;/code&gt;) as well as a few newlines (ie &lt;code&gt;\n&lt;/code&gt;) to improve the output formatting to the console. The new line of code is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;log.Print(&amp;quot;served a web page\n&amp;quot;,req,&amp;quot;\n\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output we see when now re-running the server and requesting a page is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2014/11/01 07:51:02 Starting server...
2014/11/01 07:51:06 served a web page:
&amp;amp;{GET / HTTP/1.1 1 1 map[Accept:[text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8] User-Agent:[Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.94 Chrome/37.0.2062.94 Safari/537.36] Dnt:[1] Accept-Encoding:[gzip,deflate,sdch] Accept-Language:[en-US,en;q=0.8] Connection:[keep-alive] Cache-Control:[max-age=0]] 0x7eb1c0 0 [] false localhost:8000 map[] map[] &amp;lt;nil&amp;gt; map[] 127.0.0.1:54933 / &amp;lt;nil&amp;gt;}

2014/11/01 07:51:06 served a web page:
&amp;amp;{GET /favicon.ico HTTP/1.1 1 1 map[Dnt:[1] User-Agent:[Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.94 Chrome/37.0.2062.94 Safari/537.36] Accept-Encoding:[gzip,deflate,sdch] Accept-Language:[en-US,en;q=0.8] Connection:[keep-alive] Accept:[*/*]] 0x7eb1c0 0 [] false localhost:8000 map[] map[] &amp;lt;nil&amp;gt; map[] 127.0.0.1:54933 /favicon.ico &amp;lt;nil&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at the two outputs again&amp;mdash;we can now see they are both different requests!!  But why?&lt;/p&gt;

&lt;p&gt;The first request starts with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;{GET / HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is a &lt;code&gt;GET&lt;/code&gt; for &lt;code&gt;/&lt;/code&gt; &amp;mdash;so asking (ie GETting) a copy of the web page located on the web server at the location &lt;code&gt;/&lt;/code&gt; &amp;mdash;which is the root of the web site.  That is is fine&amp;mdash;and what we would expect&amp;mdash;a request to provide a web page&amp;hellip;&lt;/p&gt;

&lt;p&gt;The second request then&amp;mdash;this starts with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;{GET /favicon.ico HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is a &lt;code&gt;GET&lt;/code&gt; for &lt;code&gt;/favicon.ico&lt;/code&gt; - so asking (ie GETting) a copy of a file called &lt;code&gt;favicon.ico&lt;/code&gt; located on the web server. Ok&amp;mdash;so the browser issues a second request to our web server&amp;mdash;asking for a copy of the icon our web site uses&amp;mdash;the little icon you see for the site in your bookmarks, to help identify the site.&lt;/p&gt;

&lt;p&gt;Now it makes sense why we are getting two request for every single web page served. No bug, no coding error, no weird log options&amp;mdash;just a simple double request each time a page is served&amp;mdash;once for the page content, and a second for any fav icon our site might have.&lt;/p&gt;

&lt;p&gt;The tin foil hat can go back into the cupboard&amp;mdash;this is normal.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;What Next?&lt;/h2&gt;

&lt;p&gt;Well&amp;mdash;now we have this logging facility, we might as well keep it, and add an option to our code to turn it on and off. We need to add another package to provide this functionality called &lt;code&gt;io/ioutil&lt;/code&gt; and add another line to manage the output to our main function: &lt;code&gt;log.SetOutput(ioutil.Discard)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This discards (ie throws away) the log output if we wish. To re-enable it&amp;mdash;change this line to: &lt;code&gt;log.SetOutput(ioutil.Stderr)&lt;/code&gt; &amp;mdash;or just comment the line out to go back to the default behaviour. If you do comment it out though&amp;mdash;you will also need to comment out the &lt;code&gt;ioutil&lt;/code&gt; package as well&amp;mdash;as you wont be using it any more in the program, and the Go compiler will spot this and complain to you!&lt;/p&gt;

&lt;p&gt;The final code looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;io&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
)

// Function that handles a web server request for a page
func Home(w http.ResponseWriter, req *http.Request) {
	io.WriteString(w, &amp;quot;Hello World!&amp;quot;)
	log.Print(&amp;quot;served a web page\n&amp;quot;,req,&amp;quot;\n\n&amp;quot;)
}

// Function: MAIN
func main() {
	// control log output: discard == throw away  or  os.Stderr == output to stderr (console)
	log.SetOutput(ioutil.Discard)
	// start up output
	log.Println(&amp;quot;Starting server...&amp;quot;)
	// handler registered for requests to the root of our web server - send them to the function &#39;Home&#39;
	http.HandleFunc(&amp;quot;/&amp;quot;, Home)
	// start a web server on localhost port 8000 grabbing any errors that occur
	err := http.ListenAndServe(&amp;quot;:8000&amp;quot;,nil)
	// check for any errors from the above web server start-up
	if err != nil {
		log.Fatal(&amp;quot;ListenAndServer: &amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Further Information&lt;/h2&gt;

&lt;p&gt;As an exercise&amp;mdash;the flags package could be used to control the log output (ie turn logging output on or off) when the web server is started up.&lt;/p&gt;

&lt;p&gt;Further resources and information used in-conjunction with the above can be found here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reinbach.com/&#34;&gt;http://www.reinbach.com/&lt;/a&gt; - Greg Reinbach blog article &amp;ldquo;Golang Web Apps&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.goinggo.net/2013/11/using-log-package-in-go.html&#34;&gt;http://www.goinggo.net/2013/11/using-log-package-in-go.html&lt;/a&gt; - A Going Go Programming article on &amp;ldquo;Using The Log Package In Go&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://screamingatmyscreen.com/2013/6/http-request-and-goroutines/&#34;&gt;http://screamingatmyscreen.com/2013/6/http-request-and-goroutines/&lt;/a&gt; - Timo Zimmermann blog on &amp;ldquo;http.Request and goroutines&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22131865/defer-log-setoutputos-stdout-after-log-setoutputioutil-discard&#34;&gt;http://stackoverflow.com/questions/22131865/defer-log-setoutputos-stdout-after-log-setoutputioutil-discard&lt;/a&gt; - Stack Overflow article on ioutil changes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/src/pkg/log/log.go&#34;&gt;http://golang.org/src/pkg/log/log.go&lt;/a&gt; - Go source code for the log package&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>