<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wiremoons web site</title>
    <link>https://www.wiremoons.com/</link>
    <description>Recent content on wiremoons web site</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 18 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.wiremoons.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nim Debugging Approaches</title>
      <link>https://www.wiremoons.com/posts/2020-04-18-nim-debugging-approaches/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.wiremoons.com/posts/2020-04-18-nim-debugging-approaches/</guid>
      <description>Nim Debugging Approaches The article explores debugging Nim programs, and different approaches to outputting debug messages from a simple example program. All the included code was tested with Nim compiler version 1.2.0 running on Linux ARM.
Approaches to Debugging Source Code Whatever programming language is being used, one requirement that pretty much exists in all of them, is the ability to carryout debugging. Nim, while being a concise and no fuss language with easy to read and very Python like source code syntax, is no different.</description>
    </item>
    
    <item>
      <title>Training in a Polarised Fashion</title>
      <link>https://www.wiremoons.com/posts/2020-04-16-training-in-a-polarised-fashion/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.wiremoons.com/posts/2020-04-16-training-in-a-polarised-fashion/</guid>
      <description>Training in a Polarised Fashion It is important that you enjoy your sport of choice and get whatever you wish to achieve from it—be it fun, fitness, welfare, completing a goal, improved health, or just the social aspect that it provides. When first starting out in a sport, it may begin as a recreational activity, and all that matters is the achievement of carrying out the activity, plus any basic equipment required to participate—such as pair of trainers (ie running shoes), a bike, a swimming costume, etc.</description>
    </item>
    
    <item>
      <title>Cycling Restart</title>
      <link>https://www.wiremoons.com/posts/2016-03-05-cycling-restart/</link>
      <pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.wiremoons.com/posts/2016-03-05-cycling-restart/</guid>
      <description>Cycling Restart Summary So I decided to get fit again. After not doing any activity at all for quite a while&amp;mdash;and not cycling for approximately 20 years!
I thought I would capture the background and the early part of this journey, before I forget the details, and so I can review the reasons in the future&amp;mdash;when I inevitably fail to remember the point to exercising again.
So - why would I do this, and what was the catalyst?</description>
    </item>
    
    <item>
      <title>Ubuntu Pre Compiled Kernel Upgrade</title>
      <link>https://www.wiremoons.com/posts/2016-02-20-ubuntu-pre-compiled-kernel-upgrade/</link>
      <pubDate>Sat, 20 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.wiremoons.com/posts/2016-02-20-ubuntu-pre-compiled-kernel-upgrade/</guid>
      <description>Ubuntu Pre-Compiled Kernel Installation About If you are not familar with Ubuntu - a good overveiw of this execellent free operating system&amp;rsquo;s features can be found here: Ubuntu
The instructions below are for obtaining and installing a pre-compiled Ubuntu kernel, from the ubuntu.com kernel web site.
The instructions explain how a computer already running the Ubuntu operating system can use the latest Ubuntu kernel available from the Ubuntu Kernel web site.</description>
    </item>
    
    <item>
      <title>New Text Editors for All</title>
      <link>https://www.wiremoons.com/posts/2015-07-12-new-text-editors-for-all/</link>
      <pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.wiremoons.com/posts/2015-07-12-new-text-editors-for-all/</guid>
      <description>New Text Editors for All Summary The most popular text editors have been Vim (or Vi) and Emacs for many years. Many an Internet flame-war has taken place over the virtues, differences, and capabilities of each editor, over the other. New &amp;lsquo;easier&amp;rsquo; text editors have appeared too, and some have stayed around - such as Nano that ships with just about all Linux distros.
Now there is a new set of text editors, all looking similar, all offering something new, all cross platform, and so on&amp;mdash;and the reason?</description>
    </item>
    
    <item>
      <title>Easy Passwords Everywhere</title>
      <link>https://www.wiremoons.com/posts/2015-01-22-easy-passwords-everywhere/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.wiremoons.com/posts/2015-01-22-easy-passwords-everywhere/</guid>
      <description>Easy Passwords Everywhere Summary The internet news of two days ago (20 Jan 2014) was all about the terrible passwords being used in 2014 for protecting access to online services. The news originated from a press release posted the password management company SplashData.
The most commonly used top 10 poor passwords were:
 123456 password 12345 12345678 qwerty 123456789 1234 baseball dragon football  These passwords were obtained by looking at the reams of leaked password lists (over 3 million passwords) that are available on the internet, published following security breaches at various companies.</description>
    </item>
    
    <item>
      <title>Three Letter Passwords</title>
      <link>https://www.wiremoons.com/posts/2014-12-09-three-letter-word-passwords/</link>
      <pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.wiremoons.com/posts/2014-12-09-three-letter-word-passwords/</guid>
      <description>Three Word - Password Generator Summary I recently created a simple application named uniquely as passgen which was written to generate a random password created from a pool of English three letter words. This gave me a small Golang project to work on, and also to create a handy tool to generate strong passwords.
How Does it Work? This application generates password suggestions based on a pool of several hundred three letter English words.</description>
    </item>
    
    <item>
      <title>Serving Up Static Content from Golang Apps</title>
      <link>https://www.wiremoons.com/posts/2014-11-30-serving-up-static-content-from-golang-apps/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.wiremoons.com/posts/2014-11-30-serving-up-static-content-from-golang-apps/</guid>
      <description>The Background Go is a great programming language, and three of the features I like the most are:
 its easy cross platform program creation - write a program on a Linux 64bit system&amp;mdash;cross compile easily, and deploy the executable straight onto a Windows 32bit computer (if you so desire of course!); its modern awareness of the web - and therefore inclusion of commonly required application functionality built-in to the language libraries; its static compilation - related to the first one, but key in that it is only the executable that needs to be deployed&amp;mdash;no library dependency, DLL hell, or installation packaging needed.</description>
    </item>
    
    <item>
      <title>Go Web Server - Why Two Log Outputs?</title>
      <link>https://www.wiremoons.com/posts/2014-10-01-golang-why-two-log-outputs/</link>
      <pubDate>Sat, 01 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.wiremoons.com/posts/2014-10-01-golang-why-two-log-outputs/</guid>
      <description>The Go Program Create a very simple Go web server as follows, by saving the following Go code into a file called server.go:
package main import ( &amp;quot;io&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) // Function Home - that handles a web server request for a page func Home(w http.ResponseWriter, req *http.Request) { // write some text to the calling web browser io.WriteString(w, &amp;quot;Hello World!&amp;quot;) // output to the console that we did something log.</description>
    </item>
    
  </channel>
</rss>